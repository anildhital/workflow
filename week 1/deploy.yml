Github Actions and Workflow
Create a .github/workflows folder in your repository.
Create a new YAML file:
.github/workflows/deploy.yml
Add the following code to your workflow file:
name: Deploy Vanilla JavaScript PWA Checklist App
on:
 push:
 branches:
 - main
jobs:
 build-and-deploy:
 runs-on: ubuntu-latest
 steps:
 - name: Checkout repository
 uses: actions/checkout@v3
 - name: Install Dependencies (if any)
 run: |
 if [ -f package.json ]; then
 npm install
 fi
 - name: Build Project (if any build step exists)
 run: |
 if [ -f package.json ]; then
 npm run build
 fi
 - name: Deploy to GitHub Pages
 uses: peaceiris/actions-gh-pages@v3
 with:
 github_token: ${{ secrets.GITHUB_TOKEN }}
 publish_dir: ./
Step 1: Setting Up Firebase Storage
Create a Firebase Project
• Go to Firebase Console.
• Click "Add Project" and follow the on-screen instructions to create a new project.
Enable Firebase Storage
• In your Firebase project, go to Build > Firestore Database.
• Click Create Database, and choose Start in production mode.
• Set the Firestore database location and confirm
Add Firebase to Your App
• Register your app in the Firebase Console under Project Settings > Your Apps.
• Copy the Firebase configuration object:
const firebaseConfig = {
 apiKey: "your-api-key",
 authDomain: "your-auth-domain",
 projectId: "your-project-id",
 storageBucket: "your-storage-bucket",
 messagingSenderId: "your-messaging-sender-id",
 appId: "your-app-id"
};
NPM Install
npm i firebase
npm i firebase-admin
npm i gh-pages
npm i parcel
Parcel is a module that will help us build our app correctly for deployment.
To make the service worker work with the parcel module, remove the service work
registration from index.html and add the following code into app.js.
const sw = new URL('service-worker.js', import.meta.url)
if ('serviceWorker' in navigator) {
 const s = navigator.serviceWorker;
 s.register(sw.href, {
 scope: '/YOUR_REPOSITORY_NAME_HERE/'
 })
 .then(_ => console.log('Service Worker Registered for scope:', sw.href,
'with', import.meta.url))
 .catch(err => console.error('Service Worker Error:', err));
}
Initialize Firebase In your main JavaScript file:
import { initializeApp } from 'firebase/app';
import { doc, getDocs, addDoc, updateDoc, getFirestore, collection } from
"firebase/firestore";
const firebaseConfig = {
 apiKey: "your-api-key",
 authDomain: "your-auth-domain",
 projectId: "your-project-id",
 storageBucket: "your-storage-bucket",
 messagingSenderId: "your-messaging-sender-id",
 appId: "your-app-id"
};
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
Step 2: Saving the To-Do List
Update the Add Task functionality to save the tasks to Firestore:
addTaskBtn.addEventListener('click', async () => {
 const task = taskInput.value.trim();
 if (task) {
 const taskInput = document.getElementById("taskInput");
 const taskText = taskInput.value.trim();
 if (taskText) {
 await addTaskToFirestore(taskText);
 renderTasks();
 taskInput.value = "";
 }
 renderTasks();
 }
});
async function addTaskToFirestore(taskText) {
 await addDoc(collection(db, "todos"), {
 text: taskText,
 completed: false
 });
 }
Retrieving the To-Do List
Fetch tasks from Firestore when the app loads:
async function renderTasks() {
 var tasks = await getTasksFromFirestore();
 taskList.innerHTML = "";

 tasks.forEach((task, index) => {
 if(!task.data().completed){
 const taskItem = document.createElement("li");
 taskItem.id = task.id;
 taskItem.textContent = task.data().text;
 taskList.appendChild(taskItem);
 }
 });
 }
async function getTasksFromFirestore() {
 var data = await getDocs(collection(db, "todos"));
 let userData = [];
 data.forEach((doc) => {
 userData.push(doc);
 });
 return userData;
}
Adding Security and Validation
Validate user input to prevent harmful data:
function sanitizeInput(input) {
 const div = document.createElement("div");
 div.textContent = input;
 return div.innerHTML;
}
Use this function when saving tasks:
const taskText = sanitizeInput(taskInput.value.trim());
Package.json File
Your package.json file should now look like the following:
{
 "name": "info-5146",
 "version": "1.0.0",
 "description": "",
 "type": "module",
 "scripts": {
 "start": "parcel index.html",
 "build": "parcel build --dist-dir docs --public-url /CheckList/ index.html",
 "dev:build": "parcel build --dist-dir dist --no-content-hash index.html",
 "dev:run": "npm run dev:build && npm run dev:start",
 "dev:start": "parcel serve --dist-dir dist index.html",
 "lint": "eslint ."
 },
 "keywords": [],
 "author": "",
 "license": "ISC",
 "dependencies": {
 "firebase": "^11.2.0",
 "firebase-admin": "^13.0.2",
 "gh-pages": "^6.3.0",
 "loglevel": "^1.9.2",
 "parcel": "latest"
 },
 "devDependencies": {
 "@parcel/packager-raw-url": "^2.13.3",
 "@parcel/transformer-webmanifest": "^2.13.3",
 "assert": "^2.1.0",
 "browserify-zlib": "^0.2.0",
 "buffer": "^6.0.3",
 "crypto-browserify": "^3.12.1",
 "eslint": "^9.18.0",
 "events": "^3.3.0",
 "globals": "^15.14.0",
 "https-browserify": "^1.0.0",
 "os-browserify": "^0.3.0",
 "path-browserify": "^1.0.1",
 "process": "^0.11.10",
 "querystring-es3": "^0.2.1",
 "stream-browserify": "^3.0.0",
 "stream-http": "^3.2.0",
 "string_decoder": "^1.3.0",
 "url": "^0.11.4",
 "util": "^0.12.5",
 "vm-browserify": "^1.1.2"
 }
}
Note the Scripts. These are what parcel uses to build and run your app.
Before you push to github each time, run the following code:
npm run build
You will need to change the default deploy folder on githhub pages to /docs.
Installing ESLint
Install ESLint
• Install ESLint as a development dependency:
npm install eslint --save-dev
Create an ESLint Configuration File
• Generate a basic ESLint configuration file by running:
npx eslint --init
• Follow the prompts to customize your ESLint setup:
o Choose "To check syntax, find problems, and enforce code style."
o Select "JavaScript modules (import/export)."
o Choose your preferred style guide (e.g., Airbnb, Standard, or Google).
o Choose whether to use JavaScript or JSON for the config file.
o Let ESLint install additional dependencies, if prompted.
Adding a Linting Script
Add a Script in package.json Open your package.json file and add the following under
the "scripts" section:
"scripts": {
 "lint": "eslint ."
}
Test the Linting Setup
• Run the linting script in your terminal:
npm run lint
1.
o ESLint will scan your project files and display any warnings or errors.
Configuring ESLint for the To-Do List App
Customizing ESLint Rules
• Open the eslintrc.config.jsfile created during initialization.
• Add or modify rules to suit your project’s needs. For example:
import js from "@eslint/js";
export default [
 {
 rules: {
 "no-unused-vars": "warn",
 "no-undef": "warn"
 },
 files: ["*.js"]
 }
];
Ignoring Files
• Create a .eslintignore file to exclude specific files or folders from linting
(e.g., node_modules):
node_modules/
dist/
Automating Linting in GitHub Actions
Update the GitHub Actions Workflow Add a linting step to
your .github/workflows/deploy.yml file:
jobs:
 build:
 runs-on: ubuntu-latest
 steps:
 - name: Checkout code
 uses: actions/checkout@v3
 - name: Set up Node.js
 uses: actions/setup-node@v3
 with:
 node-version: '16'
 - name: Install dependencies
 run: npm install
 - name: Run linting
 run: npm run lint
Setting Up Logging in Your To-Do List App
Install a Logging Library To streamline logging, you can use a library like loglevel:
npm install loglevel
Add Logging to Your Code In your main JavaScript file, import loglevel and initialize
a logger:
import log from "loglevel";
// Set the log level (trace, debug, info, warn, error)
log.setLevel("info");
// Example logs
log.info("Application started");
log.debug("Debugging information");
log.error("An error occurred");
Log User Interactions Add logging to your app to capture key actions. For example:
function addTask(task) {
 try {
 // Log user action
 log.info(`Task added: ${task}`);
 // Add task to the list
 tasks.push(task);
 renderTasks();
 } catch (error) {
 // Log error
 log.error("Error adding task", error);
 }
}
Integrating Logs into Your CI/CD Pipeline
Upload Logs to GitHub Modify your GitHub Actions workflow to include a step for
uploading logs:
jobs:
 build:
 runs-on: ubuntu-latest
 steps:
 - name: Checkout code
 uses: actions/checkout@v3
 - name: Set up Node.js
 uses: actions/setup-node@v3
 with:
 node-version: '16'
 - name: Install dependencies
 run: npm install
 - name: Run linting
 run: npm run lint
 - name: Upload logs
 run: |
 mkdir logs
 echo "Logs uploaded on $(date)" > logs/summary.log
 tar -czf logs.tar.gz logs
 continue-on-error: true